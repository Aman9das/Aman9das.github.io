{
  "hash": "9543338097d02c971fbb73a9372b45a4",
  "result": {
    "markdown": "---\ntitle: \"Geodesic Meter Computation\"\nauthor: Aman Das\ndate: 2023-8-29\nformat: html\ncode-fold: true\ncategories:\n  - statistics\n  - regression\n---\n\n\nIn this article, we will try to estimate the length of the meridian between Equator and North Pole using Least Square error and Least Absolute deviation estimates over two historical datasets.\n\n## Theory\n\nIn 1687, Isaac Newton claimed that the Earths rotation around its axis made it an Oblate Sphere.\nRotation caused flattening at the Poles and bulging at the Equator.\n\nIf so, the distance (on earths surface) between two Latitude lines would be:\n$$\nY \\approx C + m\\sin^2\\theta\n$$\n\nWhere $\\theta$ is the central meridian angle.\n\nWe may interpret $Y$ to be a dependent variable on $\\sin^2\\theta$ and estimte $C$, and $m$.\nThus we can estimate the whole meridian length by summing over the latitude angles using regression. \n\n## Import dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readODS)\n\nd1 = read_ods(\"geodata1.ods\")\nd2 = read_ods(\"geodata2.ods\")\n```\n:::\n\n\n## Standardization\n\nWe standardize X and set Y to sin^2^θ and meter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nradians = function(degree, minute = 0, second = 0){\n  ratiod = pi / 180\n  ratiom = ratiod / 60\n  ratios = ratiom / 60\n  res = degree * ratiod + minute * ratiom + second * ratios\n  return(res)\n}\n\nd1$lat = radians(d1$lat1, d1$lat2)\nd1$X = (sin(d1$lat))^2\nd1$Y = d1$arc * 6.39 * 0.3048\n\nd2$lat = radians(d2$L1, d2$L2, d2$L3)\nd2$arc = d2$S / d2$d\nd2$X = (sin(d2$lat))^2\nd2$Y = d2$arc * 12.78 * 0.3048\n```\n:::\n\n\nOut dataset looks like this at this point:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 7\n   lat1  lat2   arc  sin2   lat     X       Y\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1     0     0 56751     0 0     0     110532.\n2    33    18 57037  3014 0.581 0.301 111089.\n3    42    59 56979  4648 0.750 0.465 110976.\n4    49    23 57074  5762 0.862 0.576 111161.\n5    66    19 57422  8386 1.16  0.839 111839.\n```\n:::\n\n```{.r .cell-code}\nd2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 9\n       S     d    L1    L2    L3   lat    arc     X       Y\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>   <dbl>\n1 62473.  2.19    49    56    30 0.872 28538. 0.586 111165.\n2 76546.  2.67    47    30    46 0.829 28683. 0.544 111730.\n3 84425.  2.96    44    41    48 0.780 28489. 0.495 110976.\n4 52749.  1.85    42    17    20 0.738 28472. 0.453 110909.\n```\n:::\n:::\n\n\n## Plot the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(d1, aes(x = X, y = Y))+\n  geom_point()+\n  labs(title = \"Boscovich Data\", )+xlab(\"sin²theta\")+ylab(\"Arc Length\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(d2, aes(x = X, y = Y))+\n  geom_point()+\n  labs(title = \"French Data\", )+xlab(\"sin²theta\")+ylab(\"Arc Length\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Ordinary Least Squares Estimate\n\nEstimate the coefficient of sin²θ and Intercept using Least Squares Estimate. And Predict Meridian Length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestmerlen = function(coeff){ as.numeric( coeff[1]*90 + coeff[2]*45 ) }\n\nolsmodel1 = lm(formula=d1$Y~d1$X)\ncat( \"Boscovich Data OLS estimate of Meridian Line length:\",  estmerlen(olsmodel1$coefficients) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBoscovich Data OLS estimate of Meridian Line length: 10008879\n```\n:::\n\n```{.r .cell-code}\nolsmodel2 = lm(formula=d2$Y~d2$X)\ncat( \"French Data OLS estimate of Meridian Line length:\",  estmerlen(olsmodel2$coefficients) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrench Data OLS estimate of Meridian Line length: 10001451\n```\n:::\n:::\n\n\n## Least Absolute Deviation Estimation\n\nEstimate the coefficient of sin²θ and Intercept using Least Absolute Deviation. Elemental Lines were used to compute LAD. Predict Meridian Length.\n\nElemental Lines are lines joining two data points in the Sample Space.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nad = function(Y, X, a, b){\n  l = length(Y)\n  cumudevn = 0\n  for (i in seq(l)) {\n    devn = abs( Y[i] - a - b * X[i] )\n    cumudevn = cumudevn + devn\n  }\n  \n  return(cumudevn)\n}\n\nlad = function(Y, X){\n  l = length(Y)\n  labsdevn = sum( abs(Y - mean(Y)) )\n  coeff = c( mean(Y), 0)\n  for (i in seq(l-1)) {\n    for (j in seq(i+1, l)) {\n      b1 = (Y[j] - Y[i])/(X[j] - X[i])\n      b0 = (Y[i] - b1 * X[i])\n      absdevn = ad(Y, X, b0, b1)\n      if (labsdevn > absdevn) {\n        labsdevn = absdevn\n        coeff = c(b0, b1)\n      }\n    }\n  }\n  \n  return(coeff)\n}\n\nladmodel1 = lad(d1$Y, d1$X)\ncat( \"Boscovich Data LAD estimate of Meridian Line length:\",  estmerlen(ladmodel1) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBoscovich Data LAD estimate of Meridian Line length: 10018034\n```\n:::\n\n```{.r .cell-code}\nladmodel2 = lad(d2$Y, d2$X)\ncat( \"French Data LAD estimate of Meridian Line length:\",  estmerlen(ladmodel2) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrench Data LAD estimate of Meridian Line length: 9990026\n```\n:::\n:::\n\n\n## Conclusion\n\nBoth OLS and LAD models predict the Meridian length to be close to ten million meters.\nHence the meter as prescribed at the time, was close to the intended definition.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}